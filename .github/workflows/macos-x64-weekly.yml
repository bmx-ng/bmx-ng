name: macOS x64 Weekly

on: 
  schedule:
    - cron: '40 0 * * 0'
  workflow_dispatch:

jobs:
    build:
      runs-on: macos-12
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
  
        - name: Run build script
          run: |
            mkdir -p build
            cp src/scripts/build_release.sh build
            cd build
            ./build_release.sh -b 0.136.3.49 -p -t -r x64 -a x64
            cd ..
  
        - name: Populate env variables
          run: |
            echo "VERSION_TAG=$(cat build/version-tag.txt)" >> $GITHUB_ENV
            echo "PACKAGE_NAME=$(cat build/package-name.txt)" >> $GITHUB_ENV
            echo "PACKAGE_MIME_TYPE=$(cat build/package-mime.txt)" >> $GITHUB_ENV

        - name: Set custom tag
          id: custom_tag
          run: |
            echo "tag=v${{ env.VERSION_TAG }}.macos.x64" >> $GITHUB_OUTPUT

        - name: Create Release and Upload Asset
          uses: softprops/action-gh-release@v1
          with:
            tag_name: ${{ steps.custom_tag.outputs.tag }}
            name: "[weekly] BlitzMax macOS x64 v${{ env.VERSION_TAG }}"
            body: |
                BlitzMax, x64 macOS edition.

                Includes SDL backend, mojo2, Crypto, Audio, Image, Math, Random, Net, Text, Steam.
                
                ## Installing
                
                BlitzMax for macOS does not currently ship with any compiled binaries (bcc, bmk, MaxIDE) due to security restrictions applied to downloaded executables. Binaries are automatically sandboxed so that it is prohibited from access the local BlitzMax folders (bin, mod, etc).
                
                ### Building the Binaries
                
                As a workaround, we provide a script you can run from Finder which will build all the required binaries and allow you to get started coding in BlitzMax.
                
                After unzipping the release, run either
                * `run_me_first.command` - double-click on it in Finder. You will probably then need to go to Preferences -> Security & Privacy, and choose to Run it anyway. This will allow the script to run in a Terminal window and build the binaries.
                * `build_dist.sh` - open Terminal, and navigate to the unzipped BlitzMax folder. Run the script with `./build_dist.sh`. This will build the binaries.

                *Note: This is a weekly build, and may contain bugs. Use at your own risk.*
            prerelease: true
            files: ./build/${{ env.PACKAGE_NAME }}
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  